/*
 * This file is generated by jOOQ.
 */
package org.city_discover.domain.jooq.tables.records;


import java.time.Instant;
import java.util.UUID;

import org.city_discover.domain.jooq.tables.Place;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * Places
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlaceRecord extends UpdatableRecordImpl<PlaceRecord> implements Record8<UUID, String, String, Instant, Instant, String, Double, Double> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.place.id</code>. Place ID
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.place.id</code>. Place ID
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.place.name</code>. Place name
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.place.name</code>. Place name
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.place.description</code>. Place description
     */
    public void setDescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.place.description</code>. Place description
     */
    public String getDescription() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.place.creation_date</code>. Creation date
     */
    public void setCreationDate(Instant value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.place.creation_date</code>. Creation date
     */
    public Instant getCreationDate() {
        return (Instant) get(3);
    }

    /**
     * Setter for <code>public.place.modification_date</code>. Modification date
     */
    public void setModificationDate(Instant value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.place.modification_date</code>. Modification date
     */
    public Instant getModificationDate() {
        return (Instant) get(4);
    }

    /**
     * Setter for <code>public.place.author</code>. Place author (system or user
     * ID)
     */
    public void setAuthor(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.place.author</code>. Place author (system or user
     * ID)
     */
    public String getAuthor() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.place.latitude</code>. Place latitude
     */
    public void setLatitude(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.place.latitude</code>. Place latitude
     */
    public Double getLatitude() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>public.place.longitude</code>. Place longitude
     */
    public void setLongitude(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.place.longitude</code>. Place longitude
     */
    public Double getLongitude() {
        return (Double) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<UUID, String, String, Instant, Instant, String, Double, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<UUID, String, String, Instant, Instant, String, Double, Double> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Place.PLACE.ID;
    }

    @Override
    public Field<String> field2() {
        return Place.PLACE.NAME;
    }

    @Override
    public Field<String> field3() {
        return Place.PLACE.DESCRIPTION;
    }

    @Override
    public Field<Instant> field4() {
        return Place.PLACE.CREATION_DATE;
    }

    @Override
    public Field<Instant> field5() {
        return Place.PLACE.MODIFICATION_DATE;
    }

    @Override
    public Field<String> field6() {
        return Place.PLACE.AUTHOR;
    }

    @Override
    public Field<Double> field7() {
        return Place.PLACE.LATITUDE;
    }

    @Override
    public Field<Double> field8() {
        return Place.PLACE.LONGITUDE;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public String component3() {
        return getDescription();
    }

    @Override
    public Instant component4() {
        return getCreationDate();
    }

    @Override
    public Instant component5() {
        return getModificationDate();
    }

    @Override
    public String component6() {
        return getAuthor();
    }

    @Override
    public Double component7() {
        return getLatitude();
    }

    @Override
    public Double component8() {
        return getLongitude();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public String value3() {
        return getDescription();
    }

    @Override
    public Instant value4() {
        return getCreationDate();
    }

    @Override
    public Instant value5() {
        return getModificationDate();
    }

    @Override
    public String value6() {
        return getAuthor();
    }

    @Override
    public Double value7() {
        return getLatitude();
    }

    @Override
    public Double value8() {
        return getLongitude();
    }

    @Override
    public PlaceRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public PlaceRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public PlaceRecord value3(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public PlaceRecord value4(Instant value) {
        setCreationDate(value);
        return this;
    }

    @Override
    public PlaceRecord value5(Instant value) {
        setModificationDate(value);
        return this;
    }

    @Override
    public PlaceRecord value6(String value) {
        setAuthor(value);
        return this;
    }

    @Override
    public PlaceRecord value7(Double value) {
        setLatitude(value);
        return this;
    }

    @Override
    public PlaceRecord value8(Double value) {
        setLongitude(value);
        return this;
    }

    @Override
    public PlaceRecord values(UUID value1, String value2, String value3, Instant value4, Instant value5, String value6, Double value7, Double value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PlaceRecord
     */
    public PlaceRecord() {
        super(Place.PLACE);
    }

    /**
     * Create a detached, initialised PlaceRecord
     */
    public PlaceRecord(UUID id, String name, String description, Instant creationDate, Instant modificationDate, String author, Double latitude, Double longitude) {
        super(Place.PLACE);

        setId(id);
        setName(name);
        setDescription(description);
        setCreationDate(creationDate);
        setModificationDate(modificationDate);
        setAuthor(author);
        setLatitude(latitude);
        setLongitude(longitude);
        resetChangedOnNotNull();
    }
}
