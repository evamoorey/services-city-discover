/*
 * This file is generated by jOOQ.
 */
package org.city_discover.domain.jooq.tables;


import java.util.UUID;
import java.util.function.Function;

import org.city_discover.domain.jooq.Keys;
import org.city_discover.domain.jooq.Public;
import org.city_discover.domain.jooq.tables.records.KittyRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Kitties
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Kitty extends TableImpl<KittyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.kitty</code>
     */
    public static final Kitty KITTY = new Kitty();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<KittyRecord> getRecordType() {
        return KittyRecord.class;
    }

    /**
     * The column <code>public.kitty.id</code>. Kitty ID
     */
    public final TableField<KittyRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field(DSL.raw("gen_random_uuid()"), SQLDataType.UUID)), this, "Kitty ID");

    /**
     * The column <code>public.kitty.name</code>. Kitty name
     */
    public final TableField<KittyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR.nullable(false), this, "Kitty name");

    /**
     * The column <code>public.kitty.latitude</code>. Kitty place latitude
     */
    public final TableField<KittyRecord, Double> LATITUDE = createField(DSL.name("latitude"), SQLDataType.DOUBLE.nullable(false), this, "Kitty place latitude");

    /**
     * The column <code>public.kitty.longitude</code>. Kitty place longitude
     */
    public final TableField<KittyRecord, Double> LONGITUDE = createField(DSL.name("longitude"), SQLDataType.DOUBLE.nullable(false), this, "Kitty place longitude");

    /**
     * The column <code>public.kitty.photo_id</code>. Kitty photo id
     */
    public final TableField<KittyRecord, UUID> PHOTO_ID = createField(DSL.name("photo_id"), SQLDataType.UUID.nullable(false), this, "Kitty photo id");

    private Kitty(Name alias, Table<KittyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Kitty(Name alias, Table<KittyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Kitties"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.kitty</code> table reference
     */
    public Kitty(String alias) {
        this(DSL.name(alias), KITTY);
    }

    /**
     * Create an aliased <code>public.kitty</code> table reference
     */
    public Kitty(Name alias) {
        this(alias, KITTY);
    }

    /**
     * Create a <code>public.kitty</code> table reference
     */
    public Kitty() {
        this(DSL.name("kitty"), null);
    }

    public <O extends Record> Kitty(Table<O> child, ForeignKey<O, KittyRecord> key) {
        super(child, key, KITTY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<KittyRecord> getPrimaryKey() {
        return Keys.PK_PLACE_UUID;
    }

    @Override
    public Kitty as(String alias) {
        return new Kitty(DSL.name(alias), this);
    }

    @Override
    public Kitty as(Name alias) {
        return new Kitty(alias, this);
    }

    @Override
    public Kitty as(Table<?> alias) {
        return new Kitty(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Kitty rename(String name) {
        return new Kitty(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kitty rename(Name name) {
        return new Kitty(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Kitty rename(Table<?> name) {
        return new Kitty(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, String, Double, Double, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super String, ? super Double, ? super Double, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super String, ? super Double, ? super Double, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
