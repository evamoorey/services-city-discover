/*
 * This file is generated by jOOQ.
 */
package org.city_discover.domain.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.city_discover.domain.jooq.Keys;
import org.city_discover.domain.jooq.Public;
import org.city_discover.domain.jooq.tables.records.OwnerRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Owners
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Owner extends TableImpl<OwnerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.owner</code>
     */
    public static final Owner OWNER = new Owner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnerRecord> getRecordType() {
        return OwnerRecord.class;
    }

    /**
     * The column <code>public.owner.owner_id</code>. Owner id
     */
    public final TableField<OwnerRecord, UUID> OWNER_ID = createField(DSL.name("owner_id"), SQLDataType.UUID.nullable(false), this, "Owner id");

    /**
     * The column <code>public.owner.kitty_id</code>. Kitty id
     */
    public final TableField<OwnerRecord, UUID> KITTY_ID = createField(DSL.name("kitty_id"), SQLDataType.UUID, this, "Kitty id");

    private Owner(Name alias, Table<OwnerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Owner(Name alias, Table<OwnerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Owners"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.owner</code> table reference
     */
    public Owner(String alias) {
        this(DSL.name(alias), OWNER);
    }

    /**
     * Create an aliased <code>public.owner</code> table reference
     */
    public Owner(Name alias) {
        this(alias, OWNER);
    }

    /**
     * Create a <code>public.owner</code> table reference
     */
    public Owner() {
        this(DSL.name("owner"), null);
    }

    public <O extends Record> Owner(Table<O> child, ForeignKey<O, OwnerRecord> key) {
        super(child, key, OWNER);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<OwnerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.OWNER__FK_OWNER_KITTY_ID);
    }

    private transient Kitty _kitty;

    /**
     * Get the implicit join path to the <code>public.kitty</code> table.
     */
    public Kitty kitty() {
        if (_kitty == null)
            _kitty = new Kitty(this, Keys.OWNER__FK_OWNER_KITTY_ID);

        return _kitty;
    }

    @Override
    public Owner as(String alias) {
        return new Owner(DSL.name(alias), this);
    }

    @Override
    public Owner as(Name alias) {
        return new Owner(alias, this);
    }

    @Override
    public Owner as(Table<?> alias) {
        return new Owner(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Owner rename(String name) {
        return new Owner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Owner rename(Name name) {
        return new Owner(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Owner rename(Table<?> name) {
        return new Owner(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
