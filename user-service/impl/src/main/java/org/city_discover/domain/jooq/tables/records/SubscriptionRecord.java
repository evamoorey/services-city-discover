/*
 * This file is generated by jOOQ.
 */
package org.city_discover.domain.jooq.tables.records;


import java.util.UUID;

import org.city_discover.domain.jooq.tables.Subscription;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * Subscriptions
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscriptionRecord extends TableRecordImpl<SubscriptionRecord> implements Record2<UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.subscription.subscriber_id</code>. Subscriber id
     */
    public void setSubscriberId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.subscription.subscriber_id</code>. Subscriber id
     */
    public UUID getSubscriberId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.subscription.publisher_id</code>. Publisher id
     */
    public void setPublisherId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.subscription.publisher_id</code>. Publisher id
     */
    public UUID getPublisherId() {
        return (UUID) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<UUID, UUID> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Subscription.SUBSCRIPTION.SUBSCRIBER_ID;
    }

    @Override
    public Field<UUID> field2() {
        return Subscription.SUBSCRIPTION.PUBLISHER_ID;
    }

    @Override
    public UUID component1() {
        return getSubscriberId();
    }

    @Override
    public UUID component2() {
        return getPublisherId();
    }

    @Override
    public UUID value1() {
        return getSubscriberId();
    }

    @Override
    public UUID value2() {
        return getPublisherId();
    }

    @Override
    public SubscriptionRecord value1(UUID value) {
        setSubscriberId(value);
        return this;
    }

    @Override
    public SubscriptionRecord value2(UUID value) {
        setPublisherId(value);
        return this;
    }

    @Override
    public SubscriptionRecord values(UUID value1, UUID value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscriptionRecord
     */
    public SubscriptionRecord() {
        super(Subscription.SUBSCRIPTION);
    }

    /**
     * Create a detached, initialised SubscriptionRecord
     */
    public SubscriptionRecord(UUID subscriberId, UUID publisherId) {
        super(Subscription.SUBSCRIPTION);

        setSubscriberId(subscriberId);
        setPublisherId(publisherId);
        resetChangedOnNotNull();
    }
}
