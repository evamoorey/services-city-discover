/*
 * This file is generated by jOOQ.
 */
package org.city_discover.domain.jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.city_discover.domain.jooq.Keys;
import org.city_discover.domain.jooq.Public;
import org.city_discover.domain.jooq.tables.records.SubscriptionRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Subscriptions
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscription extends TableImpl<SubscriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.subscription</code>
     */
    public static final Subscription SUBSCRIPTION = new Subscription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscriptionRecord> getRecordType() {
        return SubscriptionRecord.class;
    }

    /**
     * The column <code>public.subscription.subscriber_id</code>. Subscriber id
     */
    public final TableField<SubscriptionRecord, UUID> SUBSCRIBER_ID = createField(DSL.name("subscriber_id"), SQLDataType.UUID, this, "Subscriber id");

    /**
     * The column <code>public.subscription.publisher_id</code>. Publisher id
     */
    public final TableField<SubscriptionRecord, UUID> PUBLISHER_ID = createField(DSL.name("publisher_id"), SQLDataType.UUID, this, "Publisher id");

    private Subscription(Name alias, Table<SubscriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subscription(Name alias, Table<SubscriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Subscriptions"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.subscription</code> table reference
     */
    public Subscription(String alias) {
        this(DSL.name(alias), SUBSCRIPTION);
    }

    /**
     * Create an aliased <code>public.subscription</code> table reference
     */
    public Subscription(Name alias) {
        this(alias, SUBSCRIPTION);
    }

    /**
     * Create a <code>public.subscription</code> table reference
     */
    public Subscription() {
        this(DSL.name("subscription"), null);
    }

    public <O extends Record> Subscription(Table<O> child, ForeignKey<O, SubscriptionRecord> key) {
        super(child, key, SUBSCRIPTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<SubscriptionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.SUBSCRIPTION__FK_SUBSCRIBER_USER_ID, Keys.SUBSCRIPTION__FK_PUBLISHER_USER_ID);
    }

    private transient User _fkSubscriberUserId;
    private transient User _fkPublisherUserId;

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_subscriber_user_id</code> key.
     */
    public User fkSubscriberUserId() {
        if (_fkSubscriberUserId == null)
            _fkSubscriberUserId = new User(this, Keys.SUBSCRIPTION__FK_SUBSCRIBER_USER_ID);

        return _fkSubscriberUserId;
    }

    /**
     * Get the implicit join path to the <code>public.user</code> table, via the
     * <code>fk_publisher_user_id</code> key.
     */
    public User fkPublisherUserId() {
        if (_fkPublisherUserId == null)
            _fkPublisherUserId = new User(this, Keys.SUBSCRIPTION__FK_PUBLISHER_USER_ID);

        return _fkPublisherUserId;
    }

    @Override
    public Subscription as(String alias) {
        return new Subscription(DSL.name(alias), this);
    }

    @Override
    public Subscription as(Name alias) {
        return new Subscription(alias, this);
    }

    @Override
    public Subscription as(Table<?> alias) {
        return new Subscription(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(String name) {
        return new Subscription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(Name name) {
        return new Subscription(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscription rename(Table<?> name) {
        return new Subscription(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
