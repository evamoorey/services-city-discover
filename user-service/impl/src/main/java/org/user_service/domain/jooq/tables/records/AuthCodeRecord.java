/*
 * This file is generated by jOOQ.
 */
package org.user_service.domain.jooq.tables.records;


import java.time.Instant;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.user_service.domain.jooq.tables.AuthCode;


/**
 * User's disposable codes for auth
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthCodeRecord extends UpdatableRecordImpl<AuthCodeRecord> implements Record3<String, String, Instant> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.auth_code.email</code>. User email
     */
    public void setEmail(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.auth_code.email</code>. User email
     */
    public String getEmail() {
        return (String) get(0);
    }

    /**
     * Setter for <code>public.auth_code.code</code>. Disposable auth code
     */
    public void setCode(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.auth_code.code</code>. Disposable auth code
     */
    public String getCode() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.auth_code.creation_date</code>. Code creation
     * time
     */
    public void setCreationDate(Instant value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.auth_code.creation_date</code>. Code creation
     * time
     */
    public Instant getCreationDate() {
        return (Instant) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Instant> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, Instant> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return AuthCode.AUTH_CODE.EMAIL;
    }

    @Override
    public Field<String> field2() {
        return AuthCode.AUTH_CODE.CODE;
    }

    @Override
    public Field<Instant> field3() {
        return AuthCode.AUTH_CODE.CREATION_DATE;
    }

    @Override
    public String component1() {
        return getEmail();
    }

    @Override
    public String component2() {
        return getCode();
    }

    @Override
    public Instant component3() {
        return getCreationDate();
    }

    @Override
    public String value1() {
        return getEmail();
    }

    @Override
    public String value2() {
        return getCode();
    }

    @Override
    public Instant value3() {
        return getCreationDate();
    }

    @Override
    public AuthCodeRecord value1(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public AuthCodeRecord value2(String value) {
        setCode(value);
        return this;
    }

    @Override
    public AuthCodeRecord value3(Instant value) {
        setCreationDate(value);
        return this;
    }

    @Override
    public AuthCodeRecord values(String value1, String value2, Instant value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AuthCodeRecord
     */
    public AuthCodeRecord() {
        super(AuthCode.AUTH_CODE);
    }

    /**
     * Create a detached, initialised AuthCodeRecord
     */
    public AuthCodeRecord(String email, String code, Instant creationDate) {
        super(AuthCode.AUTH_CODE);

        setEmail(email);
        setCode(code);
        setCreationDate(creationDate);
        resetChangedOnNotNull();
    }
}
